Webpack Loaders
- Webpack(웹팩)은 요즘의 웹 프론트엔드 개발 환경에서 주로 사용되고 있는 모듈 번들러 
- 웹팩은 기본적으로 자바스크립트 리소스만 읽고 처리할 수 있음 
- HTML, CSS, Image, Font 와 같은 리소스도 모듈로 처리될 수 있도록 하려면 별도의 전처리기가 필요. 
- 이 과정을 수행해주는 것이 로더

모든 브라우저가 최신 스펙의 ECMAScript 문법을 지원하지 못하기 때문에 
Babel을 통해 그러한 브라우저에서도 실행될 수 있도록 소스 코드의 형태를 변경(Transpile)하는 작업을 수행. 
보통 웹팩 설정파일에서 Babel-Loader 전처리기 설정을 입력하여 웹 애플리케이션을 다양한 브라우저에서 실행


Webpack의 번들링 동작 방식
- 현재 웹팩의 번들링 동작 방식에는 오버헤드가 존재 
- 프로젝트 소스 코드상에서 사소한 한 부분만을 수정하여도 웹팩의 경우 설정상의 엔트리 파일부터 시작하여 다시 의존성 그래프를 구성하고 전체 프로젝트를 리빌딩해야 함
- 이 과정에서 프로젝트의 모든 자바스크립트 소스 코드 또한 Babel-Loader의 전처리 과정을 다시 수행
- 이런 부분에서 필요 이상의 시간을 소모 
- 번들링 동작 방식을 본질적으로 변경하기 어렵다면 이 전처리 과정에 대한 수행 시간을 줄이는 것이 대안이 됨
  그러므로 Babel-Loader를 대신할 수 있는 새로운 로더를 사용 -> Esbuild


Webpack 빌드 Esbuild-Loader
- Webpack 빌드시 Esbuild의 속도를 통해 Transpilation과 Minification 단계에 대한 더 빠른 대안을 제공

다음은 프로젝트 개발부터 시작하여 프로덕션 배포 과정까지 마주할 수 있는 상황
- Dev Server StartTime
- Dev Server Hot Module Replacement Time
- Production Build Time On Local Machine
- Production Build Time On Github Actions CI


왜 더 빠른가?
- Esbuild는 Go 언어로 작성된 모듈 번들러
- JavaScript와 Go 언어가 동작하는 본질적인 차이에서 퍼포먼스 차이가 발생
- 자바스크립트는 인터프리터 언어이기 때문에 프로그램을 실행할 때 한줄 한줄 인터프리터가 기계어로 변환하는 작업을 실행 
- Go의 경우에는 프로그램 실행 전 컴파일 단계에서 미리 소스 코드를 전부 기계어로 변환 -> 실행단계에서 소스 코드가 기계어로 변환되는 작업이 생략

다중 작업을 동시에 수행할 수 있는 능력에서 차이가 발생함
싱글 스레드 기반인 자바스크립트는 한 번에 한 파일씩 순차적으로 번들링 혹은 트랜스파일링 되어야 하지만 
Go의 경우 공유 메모리 환경 아래에서 멀티 스레드 기반으로 동작할 수 있음 -> 여러 파일이 동시에 번들링 되거나 트랜스파일링 될 수 있다는 의미



